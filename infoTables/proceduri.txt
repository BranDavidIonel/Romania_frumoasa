
//delete
CREATE PROCEDURE deleteZona(id int)
BEGIN
DELETE FROM zone_turistice WHERE id=id;
DELETE FROM detalii_zone_turistice WHERE idparinte=id;
DELETE FROM top_zone WHERE idparinte=id;
END

//update
CREATE PROCEDURE updateZona(id int,nume varchar (100),descriere varchar(5000),imagine varchar(2000), links_info varchar(400),link_adresa varchar(200))
BEGIN
UPDATE zone_turistice SET nume=nume,descriere=descriere,imagine=imagine WHERE id=id;
UPDATE detalii_zone_turistice SET links_info=links_info, link_adresa=link_adresa WHERE idparinte=id;
END

//select pt zona update
CREATE PROCEDURE selectZona(id int)
BEGIN
SELECT z.id,z.nume,z.descriere,z.imagine,d.links_info,d.link_adresa 
FROM zone_turistice as z
LEFT JOIN detalii_zone_turistice as d
ON z.id=d.idParinte
WHERE z.id=id;

END
CREATE PROCEDURE insertDetails(nume varchar (100),descriere varchar(500),imagine varchar(200), links_info varchar(200),links_adresa varchar(200))
BEGIN
DECLARE maxId INT DEFAULT 0;
INSERT INTO zone_turistice(nume,descriere,imagine) VALUES(nume,descriere,imagine);
SELECT MAX(id) INTO maxId FROM zone_turistice;
INSERT INTO detalii_zone_turistice(idParinte, links_info, link_adresa) VALUES(maxId,links_info,links_adresa);
END


//selectie la toate imaginile care sunt
CREATE PROCEDURE SelectAllImages()
BEGIN
SELECT id, imagine FROM `zone_turistice` as z INNER JOIN top_zone as t ON z.id=t.idparinte ORDER BY t.voturi DESC;
END